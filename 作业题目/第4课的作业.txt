1. 定义一个复数类Complex，使得下面的代码能够工作。
	Complex c1(3, 5); //用复数3+5i初始化c1.
	Complex c2 = 4.5; //用实数4.5初始化c2 
	c1.add(c2);       //c1+c2,结果保存在c1
	c1.show();        //输出c1，这时结果应该是7.5 + 5i
	
要求：
(1) 要有拷贝构造函数.
(2) 在每个构造函数里添加打印语句，体会构造函数的调用过程。
(3）对于“Complex c2 = 4.5；”这一操作，只要构造函数带有缺省参数，这个语句就可以正确运行，思考为什么。
	
	
2. 给第3次作业的CStack类添加拷贝构造函数，实现用一个已有的栈对象构造新的栈对象。注意上课提到的浅拷贝问题。
说明：该作业如果下周二不能完成，可以延迟到第6周的周二提交。


	
3. 写出下面程序的运行结果，体会类的组合中，成员对象的构造和析构过程。。

#include <iostream>
using namespace std;

class Part  //部件类
{
    public:
        Part(int i);
        ~Part();
        void Print();
    private:
        int val;
};

class Whole 
{
    public:
       Whole(int i,int j, int k);
       ~Whole();
       void Print();
    private:
       Part one;
       Part two;
       int No;
};

Part::Part(int i)
{
	val = i;
	cout << "A part is created: value = " << val << endl;
}

Part::~Part()
{
	cout << "The part " << val << " is destroyed" << endl;
}

void Part::Print()
{
	cout << "This is the part " << val << endl;
}

Whole::Whole(int i,int j, int k): two(j),one(i), No(k)
{
	cout << "A Whole is created: value = " << No << endl;
}

Whole::~Whole()
{
	cout << "The Whole " << No << " is destroyed" << endl;
}

void Whole::Print()
{
	cout << "This is the Whole " << No <<endl;
	one.Print();
	two.Print(); 
}

void main()
{
	Whole A(1, 2, 3);
	A.Print();
}

